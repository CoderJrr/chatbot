// backend/wit_test/server.js
/*âœ… 1. HASTANELER â€” GET /api/hospitals
Ne yapar? TÃ¼m hastaneleri listeler.
Postman:
â€¢	Method: GET
â€¢	URL: http://localhost:3000/api/hospitals
â€¢	Beklenen: [ { "id": 1, "name": "Istanbul Åžehir Hastanesi" }, ... ]
________________________________________
âœ… 2. BRANÅžLAR â€” GET /api/hospitals/:id/branches
Ne yapar? Belirli bir hastanenin branÅŸlarÄ±nÄ± listeler.
Postman:
â€¢	Method: GET
â€¢	URL: http://localhost:3000/api/hospitals/1/branches
â€¢	Beklenen: [ { "id": 11, "name": "Kardiyoloji" }, ... ]
________________________________________
âœ… 3. DOKTORLAR â€” GET /api/branches/:id/doctors
Ne yapar? Bir branÅŸa baÄŸlÄ± tÃ¼m doktorlarÄ± getirir.
Postman:
â€¢	Method: GET
â€¢	URL: http://localhost:3000/api/branches/11/doctors
â€¢	Beklenen: [ { "id": 111, "name": "Dr. AyÅŸe YÄ±lmaz" }, ... ]
________________________________________
âœ… 4. DOKTOR SLOTâ€™LARI â€” GET /api/doctors/:id/times
Ne yapar? Doktorun boÅŸta olduÄŸu saatleri dÃ¶ner.
Postman:
â€¢	Method: GET
â€¢	URL: http://localhost:3000/api/doctors/111/times
â€¢	Beklenen: { doctor: "Dr. AyÅŸe YÄ±lmaz", available: ["10:00", "14:00"] }
________________________________________
âœ… 5. RANDEVU AL â€” POST /api/appointments
Ne yapar? Randevu oluÅŸturur.
Postman:
â€¢	Method: POST
â€¢	URL: http://localhost:3000/api/appointments
â€¢	Body (JSON):
json
Copy
{
  "userId": 1,
  "doctorId": 111,
  "time": "10:00"
}
â€¢	Beklenen: { message: "Randevu baÅŸarÄ±yla oluÅŸturuldu" }
________________________________________
âœ… 6. RANDEVU GÃ–RÃœNTÃœLE â€” GET /api/appointments/user/:userId
Ne yapar? Belirli bir kullanÄ±cÄ±nÄ±n randevularÄ±nÄ± listeler.
Postman:
â€¢	Method: GET
â€¢	URL: http://localhost:3000/api/appointments/user/1
â€¢	Beklenen: [ { id, userId, doctorId, time, ... } ]
________________________________________
âœ… 7. RANDEVU SÄ°L â€” DELETE /api/appointments/:id
Ne yapar? Randevuyu iptal eder.
Postman:
â€¢	Method: DELETE
â€¢	URL: http://localhost:3000/api/appointments/5
â€¢	Not: IDâ€™yi Ã¶nceki adÄ±mda Ã¶ÄŸrendiÄŸin bir randevuya gÃ¶re yaz.

8.Chat-POST http://localhost:3000/chat
body raw json
{
    "message": "merhaba"
}*/


// server.js â€“ ES-modules
import express from 'express';//GÃ¶revi: Web sunucusunun temelini oluÅŸturur. Gelen istekleri dinler, yollarÄ± (routes) 
// yÃ¶netir ve yanÄ±tlarÄ± gÃ¶nderir. Projenizin iskeletidir.
import bodyParser from 'body-parser';//GÃ¶revi: Gelen isteklerin gÃ¶vdesindeki (body) verileri 
// (genellikle JSON formatÄ±nda) okuyup 
import fetch from 'node-fetch';//GÃ¶revi: Sunucunuzun, dÄ±ÅŸarÄ±daki baÅŸka API'lere 
// (bizim durumumuzda Google Gemini API'sine) HTTP isteÄŸi gÃ¶ndermesini saÄŸlar.
import 'dotenv/config.js'; //GÃ¶revi: .env dosyanÄ±zdaki gizli bilgileri (API anahtarlarÄ±, veritabanÄ± ÅŸifreleri)
//  okur ve projenin her yerinden gÃ¼venli bir ÅŸekilde eriÅŸilebilir hale getirir.
import cors from 'cors';//GÃ¶revi: "Cross-Origin Resource Sharing" (Ã‡apraz Kaynak PaylaÅŸÄ±mÄ±) ayarlarÄ±nÄ± yÃ¶netir.
//  Bu, web tarayÄ±cÄ±sÄ±nda Ã§alÄ±ÅŸan bir uygulamanÄ±n (frontend), farklÄ± bir adresteki sunucunuza (backend) 
// istek atmasÄ±na gÃ¼venlik nedeniyle izin vermek iÃ§in gereklidir.

// ROUTES
import appointmentRoutes from './routes/appointment.routes.js';
import hospitalRoutes from './routes/hospital.routes.js';
import doctorRoutes from './routes/doctor.routes.js'; // doctor.routes.js'den gelen router

// Chat ve LLM - Sadece askGemini ve generateResponse import edildi
import { askGemini, generateResponse } from './witTest.js';

const app = express();
const port = process.env.PORT || 3000;

app.use(cors());
// Middleware
app.use(bodyParser.json());

// ROUTE MOUNTING
app.use('/api/appointments', appointmentRoutes);
app.use('/api/hospitals', hospitalRoutes);

// DoctorRoutes hem /api/doctors hem de /api/branches prefix'leri altÄ±nda Ã§alÄ±ÅŸacak
app.use('/api/doctors', doctorRoutes);
app.use('/api/branches', doctorRoutes);

// âœ… CHATBOT (Sadece Gemini ve opsiyonel OpenAI)
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || null; // OpenAI hala opsiyonel olarak kalabilir

async function askOpenAI(prompt, systemCtx = '') {
  if (!OPENAI_API_KEY) throw new Error('NO_OPENAI_KEY');
  const res = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${OPENAI_API_KEY}`,//Bu baÅŸlÄ±k, API'ye kim olduÄŸunuzu kanÄ±tlamak iÃ§in kimlik doÄŸrulama 
      // bilgisi gÃ¶nderir. Sunucu, bu baÅŸlÄ±ÄŸa bakarak isteÄŸi yapanÄ±n servisi kullanma yetkisi olup olmadÄ±ÄŸÄ±nÄ± anlar.
      //Bearer: Bu, "TaÅŸÄ±yÄ±cÄ±" anlamÄ±na gelen bir kimlik doÄŸrulama ÅŸemasÄ±dÄ±r
      'Content-Type': 'application/json'
    },
    //Bu komut, bir JavaScript nesnesini, internet Ã¼zerinden gÃ¶nderilebilecek bir metin (string) formatÄ± olan 
    // JSON formatÄ±na dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r.
    body: JSON.stringify({
      model: 'gpt-4o-mini',
      messages: [
        { role: 'system', content: systemCtx },//systemCtx ise bu mesajÄ±n iÃ§eriÄŸini tutan bir deÄŸiÅŸkendir.
        { role: 'user', content: prompt }
      ],
      temperature: 0.7 //Bu, yapay zeka modelinin yanÄ±tlarÄ±nÄ±n ne kadar "yaratÄ±cÄ±" veya "rastgele" olacaÄŸÄ±nÄ± 
      // kontrol eden bir ayardÄ±r. DeÄŸer genellikle 0 ile 1 arasÄ±nda olur.
    })
  });

  const data = await res.json();
  if (!res.ok) throw new Error(data.error?.message || 'OpenAI error');
  return data.choices?.[0]?.message?.content?.trim() || 'ðŸ¤– ChatGPTâ€™den anlamlÄ± yanÄ±t gelmedi.';
}

app.post('/chat', async (req, res) => {
  const userMessage = req.body.message;
  const providerHdr = (req.headers['x-ai-provider'] || '').toLowerCase(); // ChatGPT seÃ§eneÄŸi hala aktif
  if (!userMessage) return res.status(400).json({ error: 'message alanÄ± zorunludur' });

  //Bu fonksiyonda prompt, yapay zekaya sorduÄŸunuz asÄ±l soru veya komuttur. ctx ise (context'in kÄ±saltmasÄ±), 
  // bu soruya daha iyi bir cevap verebilmesi iÃ§in yapay zekaya saÄŸladÄ±ÄŸÄ±nÄ±z ek bilgi veya baÄŸlamdÄ±r.
  try {
    const llmChooser = async (prompt, ctx) => {
      if (providerHdr === 'chatgpt') {
        try {
          return await askOpenAI(prompt, ctx);
        } catch (e) {
          if (e.message !== 'NO_OPENAI_KEY') throw e;
          console.warn('GPT istendi fakat OPENAI_API_KEY yok; Gemini kullanÄ±lÄ±yor.');
        }
      }
      return await askGemini(prompt, ctx);
    };

    const botResponse = await generateResponse(userMessage, llmChooser);
    res.json({ reply: botResponse });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Sunucu hatasÄ±: ' + err.message });
  }
});

// SERVER LISTEN
app.listen(port, () => {
  console.log(`ðŸŸ¢ API http://localhost:${port} Ã¼zerinden Ã§alÄ±ÅŸÄ±yor.`);
});

